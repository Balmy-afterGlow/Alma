// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AgentsGetAvailableSystemAgentsData,
  AgentsGetAvailableSystemAgentsResponse,
  AgentsGetAgentDetailsData,
  AgentsGetAgentDetailsResponse,
  AgentsGetAgentToolsData,
  AgentsGetAgentToolsResponse,
  ChatChatWithAgentData,
  ChatChatWithAgentResponse,
  ConversationsGetUserConversationsData,
  ConversationsGetUserConversationsResponse,
  ConversationsCreateNewConversationData,
  ConversationsCreateNewConversationResponse,
  ConversationsGetRecentConversationsData,
  ConversationsGetRecentConversationsResponse,
  ConversationsGetConversationData,
  ConversationsGetConversationResponse,
  ConversationsUpdateConversationTitleData,
  ConversationsUpdateConversationTitleResponse,
  ConversationsDeleteUserConversationData,
  ConversationsDeleteUserConversationResponse,
  ConversationsGetConversationDetailedData,
  ConversationsGetConversationDetailedResponse,
  DashboardGetUserDashboardData,
  DashboardGetUserDashboardResponse,
  LlmConfigsGetUserLlmConfigsData,
  LlmConfigsGetUserLlmConfigsResponse,
  LlmConfigsCreateUserLlmConfigData,
  LlmConfigsCreateUserLlmConfigResponse,
  LlmConfigsGetLlmConfigData,
  LlmConfigsGetLlmConfigResponse,
  LlmConfigsUpdateUserLlmConfigData,
  LlmConfigsUpdateUserLlmConfigResponse,
  LlmConfigsDeleteUserLlmConfigData,
  LlmConfigsDeleteUserLlmConfigResponse,
  LlmConfigsGetLlmModelsData,
  LlmConfigsGetLlmModelsResponse,
  LlmConfigsCreateLlmModelData,
  LlmConfigsCreateLlmModelResponse,
  LlmConfigsUpdateLlmModelData,
  LlmConfigsUpdateLlmModelResponse,
  LlmConfigsDeleteLlmModelData,
  LlmConfigsDeleteLlmModelResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MessagesGetConversationMessagesData,
  MessagesGetConversationMessagesResponse,
  MessagesCreateNewMessageData,
  MessagesCreateNewMessageResponse,
  MessagesGetMessageData,
  MessagesGetMessageResponse,
  MessagesUpdateUserMessageData,
  MessagesUpdateUserMessageResponse,
  MessagesDeleteUserMessageData,
  MessagesDeleteUserMessageResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class AgentsService {
  /**
   * Get Available System Agents
   * 获取可用的系统Agent列表
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.skip
   * @param data.limit
   * @returns AgentsPublic Successful Response
   * @throws ApiError
   */
  public static getAvailableSystemAgents(
    data: AgentsGetAvailableSystemAgentsData,
  ): CancelablePromise<AgentsGetAvailableSystemAgentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/system",
      query: {
        skip: data.skip,
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Agent Details
   * 获取Agent详细信息
   * @param data The data for the request.
   * @param data.agentId
   * @param data.args
   * @param data.kwargs
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public static getAgentDetails(
    data: AgentsGetAgentDetailsData,
  ): CancelablePromise<AgentsGetAgentDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/{agent_id}",
      path: {
        agent_id: data.agentId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Agent Tools
   * 获取Agent的工具列表
   * @param data The data for the request.
   * @param data.agentId
   * @param data.args
   * @param data.kwargs
   * @returns ToolsPublic Successful Response
   * @throws ApiError
   */
  public static getAgentTools(
    data: AgentsGetAgentToolsData,
  ): CancelablePromise<AgentsGetAgentToolsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/{agent_id}/tools",
      path: {
        agent_id: data.agentId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ChatService {
  /**
   * Chat With Agent
   * 与Agent进行对话
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns ChatResponse Successful Response
   * @throws ApiError
   */
  public static chatWithAgent(
    data: ChatChatWithAgentData,
  ): CancelablePromise<ChatChatWithAgentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/chat/",
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ConversationsService {
  /**
   * Get User Conversations
   * 获取当前用户的所有对话
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.skip
   * @param data.limit
   * @returns ConversationsPublic Successful Response
   * @throws ApiError
   */
  public static getUserConversations(
    data: ConversationsGetUserConversationsData,
  ): CancelablePromise<ConversationsGetUserConversationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/",
      query: {
        skip: data.skip,
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create New Conversation
   * 创建新的对话
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static createNewConversation(
    data: ConversationsCreateNewConversationData,
  ): CancelablePromise<ConversationsCreateNewConversationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/conversations/",
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Recent Conversations
   * 获取当前用户的最近对话（用于侧边栏）
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.limit
   * @returns ConversationsPublic Successful Response
   * @throws ApiError
   */
  public static getRecentConversations(
    data: ConversationsGetRecentConversationsData,
  ): CancelablePromise<ConversationsGetRecentConversationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/recent",
      query: {
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Conversation
   * 获取指定对话的详细信息
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.args
   * @param data.kwargs
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static getConversation(
    data: ConversationsGetConversationData,
  ): CancelablePromise<ConversationsGetConversationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Conversation Title
   * 更新对话标题
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static updateConversationTitle(
    data: ConversationsUpdateConversationTitleData,
  ): CancelablePromise<ConversationsUpdateConversationTitleResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User Conversation
   * 删除对话
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.args
   * @param data.kwargs
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteUserConversation(
    data: ConversationsDeleteUserConversationData,
  ): CancelablePromise<ConversationsDeleteUserConversationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Conversation Detailed
   * 获取包含详细事件信息的对话内容
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.args
   * @param data.kwargs
   * @returns ConversationWithEventsMessages Successful Response
   * @throws ApiError
   */
  public static getConversationDetailed(
    data: ConversationsGetConversationDetailedData,
  ): CancelablePromise<ConversationsGetConversationDetailedResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/{conversation_id}/detailed",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class DashboardService {
  /**
   * Get User Dashboard
   * 获取用户仪表板数据
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @returns UserDashboard Successful Response
   * @throws ApiError
   */
  public static getUserDashboard(
    data: DashboardGetUserDashboardData,
  ): CancelablePromise<DashboardGetUserDashboardResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/dashboard/",
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LlmConfigsService {
  /**
   * Get User Llm Configs
   * 获取当前用户的所有LLM配置
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.skip
   * @param data.limit
   * @returns LLMConfigsPublic Successful Response
   * @throws ApiError
   */
  public static getUserLlmConfigs(
    data: LlmConfigsGetUserLlmConfigsData,
  ): CancelablePromise<LlmConfigsGetUserLlmConfigsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/llm-configs/",
      query: {
        skip: data.skip,
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User Llm Config
   * 创建新的LLM配置
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns LLMConfigPublic Successful Response
   * @throws ApiError
   */
  public static createUserLlmConfig(
    data: LlmConfigsCreateUserLlmConfigData,
  ): CancelablePromise<LlmConfigsCreateUserLlmConfigResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/llm-configs/",
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Llm Config
   * 获取指定的LLM配置
   * @param data The data for the request.
   * @param data.llmId
   * @param data.args
   * @param data.kwargs
   * @returns LLMConfigPublic Successful Response
   * @throws ApiError
   */
  public static getLlmConfig(
    data: LlmConfigsGetLlmConfigData,
  ): CancelablePromise<LlmConfigsGetLlmConfigResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/llm-configs/{llm_id}",
      path: {
        llm_id: data.llmId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User Llm Config
   * 更新LLM配置
   * @param data The data for the request.
   * @param data.llmId
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns LLMConfigPublic Successful Response
   * @throws ApiError
   */
  public static updateUserLlmConfig(
    data: LlmConfigsUpdateUserLlmConfigData,
  ): CancelablePromise<LlmConfigsUpdateUserLlmConfigResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/llm-configs/{llm_id}",
      path: {
        llm_id: data.llmId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User Llm Config
   * 删除LLM配置
   * @param data The data for the request.
   * @param data.llmId
   * @param data.args
   * @param data.kwargs
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteUserLlmConfig(
    data: LlmConfigsDeleteUserLlmConfigData,
  ): CancelablePromise<LlmConfigsDeleteUserLlmConfigResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/llm-configs/{llm_id}",
      path: {
        llm_id: data.llmId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Llm Models
   * 获取LLM配置下的所有模型
   * @param data The data for the request.
   * @param data.llmId
   * @param data.args
   * @param data.kwargs
   * @param data.skip
   * @param data.limit
   * @returns ModelsPublic Successful Response
   * @throws ApiError
   */
  public static getLlmModels(
    data: LlmConfigsGetLlmModelsData,
  ): CancelablePromise<LlmConfigsGetLlmModelsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/llm-configs/{llm_id}/models",
      path: {
        llm_id: data.llmId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Llm Model
   * 为LLM配置创建新模型
   * @param data The data for the request.
   * @param data.llmId
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns ModelPublic Successful Response
   * @throws ApiError
   */
  public static createLlmModel(
    data: LlmConfigsCreateLlmModelData,
  ): CancelablePromise<LlmConfigsCreateLlmModelResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/llm-configs/{llm_id}/models",
      path: {
        llm_id: data.llmId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Llm Model
   * 更新模型
   * @param data The data for the request.
   * @param data.llmId
   * @param data.modelId
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns ModelPublic Successful Response
   * @throws ApiError
   */
  public static updateLlmModel(
    data: LlmConfigsUpdateLlmModelData,
  ): CancelablePromise<LlmConfigsUpdateLlmModelResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/llm-configs/{llm_id}/models/{model_id}",
      path: {
        llm_id: data.llmId,
        model_id: data.modelId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Llm Model
   * 删除模型
   * @param data The data for the request.
   * @param data.llmId
   * @param data.modelId
   * @param data.args
   * @param data.kwargs
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteLlmModel(
    data: LlmConfigsDeleteLlmModelData,
  ): CancelablePromise<LlmConfigsDeleteLlmModelResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/llm-configs/{llm_id}/models/{model_id}",
      path: {
        llm_id: data.llmId,
        model_id: data.modelId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MessagesService {
  /**
   * Get Conversation Messages
   * 获取对话中的所有消息
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.args
   * @param data.kwargs
   * @param data.skip
   * @param data.limit
   * @returns MessagesPublic Successful Response
   * @throws ApiError
   */
  public static getConversationMessages(
    data: MessagesGetConversationMessagesData,
  ): CancelablePromise<MessagesGetConversationMessagesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/messages/conversation/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create New Message
   * 创建新消息
   * @param data The data for the request.
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns MessagePublic Successful Response
   * @throws ApiError
   */
  public static createNewMessage(
    data: MessagesCreateNewMessageData,
  ): CancelablePromise<MessagesCreateNewMessageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/messages/",
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Message
   * 获取指定消息
   * @param data The data for the request.
   * @param data.messageId
   * @param data.args
   * @param data.kwargs
   * @returns MessagePublic Successful Response
   * @throws ApiError
   */
  public static getMessage(
    data: MessagesGetMessageData,
  ): CancelablePromise<MessagesGetMessageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/messages/{message_id}",
      path: {
        message_id: data.messageId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User Message
   * 更新消息（通常只允许编辑自己发送的消息）
   * @param data The data for the request.
   * @param data.messageId
   * @param data.args
   * @param data.kwargs
   * @param data.requestBody
   * @returns MessagePublic Successful Response
   * @throws ApiError
   */
  public static updateUserMessage(
    data: MessagesUpdateUserMessageData,
  ): CancelablePromise<MessagesUpdateUserMessageResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/messages/{message_id}",
      path: {
        message_id: data.messageId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User Message
   * 删除消息（软删除）
   * @param data The data for the request.
   * @param data.messageId
   * @param data.args
   * @param data.kwargs
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteUserMessage(
    data: MessagesDeleteUserMessageData,
  ): CancelablePromise<MessagesDeleteUserMessageResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/messages/{message_id}",
      path: {
        message_id: data.messageId,
      },
      query: {
        args: data.args,
        kwargs: data.kwargs,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.s
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
