/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as CertificationImport } from './routes/_certification'
import { Route as CertificationIndexImport } from './routes/_certification/index'
import { Route as CertificationSettingsImport } from './routes/_certification/settings'
import { Route as CertificationItemsImport } from './routes/_certification/items'
import { Route as CertificationAdminImport } from './routes/_certification/admin'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CertificationRoute = CertificationImport.update({
  id: '/_certification',
  getParentRoute: () => rootRoute,
} as any)

const CertificationIndexRoute = CertificationIndexImport.update({
  path: '/',
  getParentRoute: () => CertificationRoute,
} as any)

const CertificationSettingsRoute = CertificationSettingsImport.update({
  path: '/settings',
  getParentRoute: () => CertificationRoute,
} as any)

const CertificationItemsRoute = CertificationItemsImport.update({
  path: '/items',
  getParentRoute: () => CertificationRoute,
} as any)

const CertificationAdminRoute = CertificationAdminImport.update({
  path: '/admin',
  getParentRoute: () => CertificationRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_certification': {
      preLoaderRoute: typeof CertificationImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_certification/admin': {
      preLoaderRoute: typeof CertificationAdminImport
      parentRoute: typeof CertificationImport
    }
    '/_certification/items': {
      preLoaderRoute: typeof CertificationItemsImport
      parentRoute: typeof CertificationImport
    }
    '/_certification/settings': {
      preLoaderRoute: typeof CertificationSettingsImport
      parentRoute: typeof CertificationImport
    }
    '/_certification/': {
      preLoaderRoute: typeof CertificationIndexImport
      parentRoute: typeof CertificationImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  CertificationRoute.addChildren([
    CertificationAdminRoute,
    CertificationItemsRoute,
    CertificationSettingsRoute,
    CertificationIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
])

/* prettier-ignore-end */
